//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace gitter.Git.AccessLayer.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("gitter.Git.AccessLayer.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatic cherry-pick failed; fix conflicts and then commit the result..
        /// </summary>
        internal static string ExcAutomaticCherryPickFailed {
            get {
                return ResourceManager.GetString("ExcAutomaticCherryPickFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatic merge failed; fix conflicts and then commit the result..
        /// </summary>
        internal static string ExcAutomaticMergeFailed {
            get {
                return ResourceManager.GetString("ExcAutomaticMergeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Branch &apos;{0}&apos; already exists..
        /// </summary>
        internal static string ExcBranchAlreadyExists {
            get {
                return ResourceManager.GetString("ExcBranchAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Branch &apos;{0}&apos; is not fully merged..
        /// </summary>
        internal static string ExcBranchIsNotFullyMerged {
            get {
                return ResourceManager.GetString("ExcBranchIsNotFullyMerged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Branch &apos;{0}&apos; not found..
        /// </summary>
        internal static string ExcBranchNotFound {
            get {
                return ResourceManager.GetString("ExcBranchNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot write to the config file..
        /// </summary>
        internal static string ExcCannotWriteConfigFile {
            get {
                return ResourceManager.GetString("ExcCannotWriteConfigFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t {0} on empty repository..
        /// </summary>
        internal static string ExcCantDoOnEmptyRepository {
            get {
                return ResourceManager.GetString("ExcCantDoOnEmptyRepository", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commit is a merge..
        /// </summary>
        internal static string ExcCommitIsMerge {
            get {
                return ResourceManager.GetString("ExcCommitIsMerge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Config parameter does not exist..
        /// </summary>
        internal static string ExcConfigParameterDoesNotExist {
            get {
                return ResourceManager.GetString("ExcConfigParameterDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to establish connection to remote repository..
        /// </summary>
        internal static string ExcConnectionFailure {
            get {
                return ResourceManager.GetString("ExcConnectionFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation cannot be executed on dirty working directory..
        /// </summary>
        internal static string ExcDirtyWorkingDirectory {
            get {
                return ResourceManager.GetString("ExcDirtyWorkingDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have unresolved conflicts..
        /// </summary>
        internal static string ExcHaveConflicts {
            get {
                return ResourceManager.GetString("ExcHaveConflicts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid branch name..
        /// </summary>
        internal static string ExcInvalidBranchName {
            get {
                return ResourceManager.GetString("ExcInvalidBranchName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid config file..
        /// </summary>
        internal static string ExcInvalidConfigFile {
            get {
                return ResourceManager.GetString("ExcInvalidConfigFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Section or key is invalid..
        /// </summary>
        internal static string ExcInvalidSectionOrKey {
            get {
                return ResourceManager.GetString("ExcInvalidSectionOrKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid tag name..
        /// </summary>
        internal static string ExcInvalidTagName {
            get {
                return ResourceManager.GetString("ExcInvalidTagName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No section was provided..
        /// </summary>
        internal static string ExcNoSectionProvided {
            get {
                return ResourceManager.GetString("ExcNoSectionProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tag &apos;{0}&apos; already exists..
        /// </summary>
        internal static string ExcTagAlreadyExists {
            get {
                return ResourceManager.GetString("ExcTagAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tag &apos;{0}&apos; not found..
        /// </summary>
        internal static string ExcTagNotFound {
            get {
                return ResourceManager.GetString("ExcTagNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown revision: &apos;{0}&apos;..
        /// </summary>
        internal static string ExcUnknownRevision {
            get {
                return ResourceManager.GetString("ExcUnknownRevision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Untracked file &apos;{0}&apos; would be overwritten..
        /// </summary>
        internal static string ExcUntrackedFileWouldBeOverwrittenException {
            get {
                return ResourceManager.GetString("ExcUntrackedFileWouldBeOverwrittenException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have local changes to &apos;{0}&apos;..
        /// </summary>
        internal static string ExcYouHaveLocalChanges {
            get {
                return ResourceManager.GetString("ExcYouHaveLocalChanges", resourceCulture);
            }
        }
    }
}
